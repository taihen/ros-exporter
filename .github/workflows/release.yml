name: Release
on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
permissions:
  contents: write # Needed to create releases and push tags
jobs:
  release:
    name: Create Release
    runs-on: ubuntu-22.04
    steps:
      #- name: Download and build glibc 2.31  # Build glibc 2.31 for older distros which are still on servers
      #  run: |
      #    wget -q http://ftp.gnu.org/gnu/libc/glibc-2.31.tar.gz
      #    tar -xzf glibc-2.31.tar.gz
      #    mkdir glibc-2.31/build && cd glibc-2.31/build
      #    ../configure --prefix=$HOME/glibc-2.31
      #    make -j$(nproc) && make install

      #- name: Build with custom glibc
      #  run: |
      #    gcc -o myapp src/main.c -Wl,--rpath=$HOME/glibc-2.31/lib
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          # Fetch all history and tags for semantic-release
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'
      - name: Build binaries
        id: build
        run: |
          # Get version from semantic-release
          VERSION=${GITHUB_REF#refs/tags/}
          if [ "$VERSION" = "" ]; then
            VERSION="dev"
          fi

          # Get commit hash and build date
          COMMIT=$(git rev-parse --short HEAD)
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # Set ldflags for version injection
          LDFLAGS="-X main.version=${VERSION} -X main.commit=${COMMIT} -X main.date=${DATE}"
          mkdir -p dist
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "${LDFLAGS}" -o dist/ros-exporter-linux-amd64 ./cmd/ros-exporter
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags "${LDFLAGS}" -o dist/ros-exporter-linux-arm64 ./cmd/ros-exporter
          GOOS=darwin GOARCH=amd64 go build -ldflags "${LDFLAGS}" -o dist/ros-exporter-darwin-amd64 ./cmd/ros-exporter
          GOOS=darwin GOARCH=arm64 go build -ldflags "${LDFLAGS}" -o dist/ros-exporter-darwin-arm64 ./cmd/ros-exporter
      - name: Create checksums
        run: |
          cd dist
          sha256sum * > checksums.txt
          cd ..  # Go back to the root directory
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # Configuration is now handled by .releaserc.json
